"""This file generates the data file loc_vs_time.csv"""

from git import Repo
import subprocess
import pandas as pd
from io import StringIO
import os
import sunpy_paper
import datetime
import shutil
import tempfile

dirpath = tempfile.mkdtemp()

# grab a clean cloned repo from github
repo = Repo.clone_from("git@github.com:sunpy/sunpy.git", dirpath)

# make sure you are on the 1.0 branch
g = repo.git
g.checkout("v1.0.0")

all_commits = [c for c in repo.iter_commits()]

# all_commits = all_commits[::-1]

MAX_COMMITS = 10000
SKIP_COMMITS = 10

print(len(all_commits))
commit_list = all_commits[::100]

dates = []
loc = []
files = []
comments = []
blanks = []


def count_lines_of_code(repo_path):
    """Count the lines of code by looking only at .py files. This makes use of the ohcount library which
    must be installed."""

    cmd = "cloc"
    out = subprocess.Popen(
        f"{cmd} {repo_path}",
        shell=True,
        stdout=subprocess.PIPE,
        universal_newlines=True,
    ).stdout.read()

    str = StringIO(out)
    for line in str:
        if line.startswith("--------"):
            break
    data = pd.read_csv(
        str,
        skiprows=0,
        skipfooter=3,
        skip_blank_lines=True,
        sep=r"[ ]{5,}",
        index_col="Language",
        comment="-",
        engine="python",
    )

    return data


for i, c in enumerate(sorted(commit_list, key=lambda x: x.committed_date)):
    g.checkout(c)
    dates.append(str(c.committed_datetime))
    print(f"{c.committed_datetime} {c.message}")

    data = count_lines_of_code(repo_path=dirpath)
    files.append(data.sum()["files"])
    loc.append(data.sum()["code"])
    comments.append(data.sum()["comment"])
    blanks.append(data.sum()["blank"])

    # if i > MAX_COMMITS:
    #    break


g.checkout("master")

result = pd.DataFrame(
    index=dates,
    data={"code": loc, "comment": comments, "blank": blanks, "files": files},
)

output_file = os.path.join(sunpy_paper.data_dir, "loc_vs_time.csv")

with open(output_file, "w") as f:
    f.write(f"# generated by loc_vs_time_to_csv.py on {datetime.datetime.now()}\n")
    result.to_csv(f)

shutil.rmtree(dirpath)
